) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(classificador, Periodo)
graf_linhas_desp
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = nrow(dpf)/2, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE))
save(dados_desp, file = "teste.RData")
dados_desp <- NULL
load("teste.RData")
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 8) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(0, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE))
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
dados_desp$classificador
dados_desp_plot$classificador
encoding(dados_desp_plot$classificador)
Encoding(dados_desp_plot$classificador)
unique(dados_desp_plot$classificador)
dput(unique(dados_desp_plot$classificador))
Encoding(c("Benefícios RGPS", "Custeio Administrativo", "Custeio Educação",
"Custeio Saúde", "Custeio Social", "Investimentos", "Pessoal"
))
Encoding(c("Benefícios RGPS", "Custeio Administrativo", "Custeio Educação",
"Custeio Saúde", "Custeio Social", "Investimentos", "Pessoal"
)) <- "utf-8"
Encoding(c("Benefícios RGPS", "Custeio Administrativo", "Custeio Educação",
"Custeio Saúde", "Custeio Social", "Investimentos", "Pessoal"
)) <- "UTF-8"
a <- c("Benefícios RGPS", "Custeio Administrativo", "Custeio Educação", "Custeio Saúde", "Custeio Social", "Investimentos", "Pessoal")
a
Encoding(a)
Encoding(a) <- "UTF-8"
a
Encoding(a) <- "UTF-8"
a <- c("Benefícios RGPS", "Custeio Administrativo", "Custeio Educação", "Custeio Saúde", "Custeio Social", "Investimentos", "Pessoal")
Encoding(a)
dados_desp_plot$classificador <- factor(dados_desp_plot$classificador, levels = a)
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 8) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(0, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
graf_linhas_desp
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
dados_desp <- NULL
load("teste.RData")
dados_desp_plot <- dados_desp %>%
mutate(classificador = case_when(
Previdencia == TRUE ~ "Benefícios RGPS",
GND_cod == "1" ~ "Pessoal",
GND_cod %in% c("4", "5") ~ "Investimentos",
GND_cod %in% c("2", "6") ~ "Dívida",
GND_cod == "3" & Funcao_cod == "10" ~ "Custeio Saúde",
GND_cod == "3" & Funcao_cod == "12" ~ "Custeio Educação",
GND_cod == "3" & Funcao_cod %in% c("08", "11") ~ "Custeio Social",
GND_cod == "3" & as.numeric(Modalidade_cod) %in% 30:49 ~ "Outras Transferências",
GND_cod == "3" ~ "Custeio Administrativo")) %>%
group_by(Periodo, classificador) %>%
summarise(Valor = sum(Valor)) %>%
ungroup() %>%
spread(classificador, Valor) %>%
mutate_at(-1, funs(zoo::rollapply(., width = 12, FUN = sum, fill = NA, align = 'right'))) %>%
gather(-1, key = "classificador", value = "Valor_12m") %>%
#left_join(ipca) %>%
mutate(Valor_12m_ipca = Valor_12m / 1e9) %>%
filter(!is.na(Valor_12m_ipca)) %>%
filter(!classificador %in% c("Dívida", "Outras Transferências")) %>%
arrange(Periodo)
save(dados_desp_plot, file = "teste.RData")
dados_desp_plot <- NULL
load("teste.RData")
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 8) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(0, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
dados_desp_plot$classificador <- factor(dados_desp_plot$classificador
)
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 8) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(0, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
dados_desp_plot <- NULL
load("teste.RData")
unique(dados_desp_plot$classificador)
Encoding(unique(dados_desp_plot$classificador))
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 8) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(0, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 668,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
anim_save("home_TT_despesas_labels_cagados.gif", animation = last_animation())
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 6) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(0, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 700,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 6) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(.05, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 700,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
tema <- function(){
theme_minimal() +
theme(
text = element_text(family = "Open Sans", colour = "grey20"),
axis.text = element_text(family = "Open Sans", colour = "grey20", size = 16),
title = element_text(face = "bold"), # size para o Shiny
plot.subtitle = element_text(family = "Open Sans Condensed", face = "plain", size = 20, color = "#1E4C7A"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 18),
legend.title = element_text(size = 18),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(.25, "cm"),
axis.title = element_text(size = 14),
legend.position = 'bottom')
}
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 6) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(.05, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 700,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
tema <- function(){
theme_minimal() +
theme(
text = element_text(family = "Open Sans", colour = "grey20"),
axis.text = element_text(family = "Open Sans", colour = "grey20", size = 14),
title = element_text(face = "bold"), # size para o Shiny
plot.subtitle = element_text(family = "Open Sans Condensed", face = "plain", size = 20, color = "#1E4C7A"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 18),
legend.title = element_text(size = 18),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(.25, "cm"),
axis.title = element_text(size = 14),
legend.position = 'bottom')
}
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 6) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(.05, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 700,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
anim_save("home_TT_despesas_labels_cagados.gif", animation = last_animation())
dput(unique(dados_desp_plot$classificador))
unique(dados_desp_plot$classificador)
niveis_classificador <- c("Benefícios RGPS", "Custeio Administrativo", "Custeio Educação", "Custeio Saúde", "Custeio Social", "Investimentos", "Pessoal")
dados_desp_plot$classificador <- factor(dados_desp_plot$classificador, levels = niveis_classificador)
Encoding(unique(dados_desp_plot$classificador))
Encoding(dados_desp_plot$classificador)
graf_linhas_desp <- ggplot(dados_desp_plot, aes(x = Periodo, y = Valor_12m_ipca, group = classificador, color = classificador)) +
geom_line(size = 1) +
geom_segment(aes(xend = ultimo_periodo, yend = Valor_12m_ipca), linetype = 2) +
geom_point(size = 3) +
geom_text(aes(x = max(dados_desp_plot$Periodo) + 50,
label = paste(round(Valor_12m_ipca, 0), classificador),
y = ifelse(Periodo < ultimo_periodo,
Valor_12m_ipca,
Valor_12m_ipca + c(0, 20, 0, -24, 20, -7, 0))),
hjust = 0, family = "Open Sans",
size = 6) + #não tinha definido
scale_x_date(breaks = janeiros,
#date_breaks = "1 years",
labels = anos,
#date_labels = "%Y",
expand = expand_scale(mult = c(.05, .60))) +
scale_color_manual(values = paleta) + #brewer.pal(8, "Dark2")[-6]
coord_cartesian(clip = 'off') +
labs(
y = NULL,
x = NULL
) +
tema() +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 16, family = "Open Sans"), # era 10
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color = "#f0f5f7", linetype = "solid", size = 2))
gif_linhas_desp <- graf_linhas_desp +
transition_reveal(Periodo)
# + theme(axis.text = element_text(size = 10, family = "Open Sans"))
#
animate(gif_linhas_desp, nframes = 100, height = 488, width = 700,
renderer = gifski_renderer(loop = FALSE), type = "cairo")
anim_save("home_TT_despesas_labels_nao_cagados.gif", animation = last_animation())
niveis_classificador
dput(niveis_classificador)
pwd()
getwd()
load("tweets_ME.RData")
View(tweets_ME)
tweets_ME %>% mutate(total = favorite_count + retweet_count) %>% arrange(desc(total))
library(tidyverse)
tweets_ME %>% mutate(total = favorite_count + retweet_count) %>% arrange(desc(total))
tweets_ME %>% mutate(total = favorite_count + retweet_count) %>% arrange(desc(total)) %>% select(status_id, text, created_at, total)
tweets_ME %>% mutate(total = favorite_count + retweet_count) %>% arrange(desc(total)) %>% select(status_id, text, created_at, favorite_count, total)
tweets_ME %>% mutate(total = favorite_count + retweet_count) %>% arrange(desc(total)) %>% select(status_id, text, created_at, favorite_count, total) %>% .[,1]
tweets_ME %>% mutate(total = favorite_count + retweet_count) %>% arrange(desc(total)) %>% select(status_id, text, created_at, favorite_count, total)
setwd("~/GitHub/tt/datasets/alugueis")
dados_brutos <- read.csv2("alugueis_2012_2019_pago_real.csv")
dados <- dados_brutos %>%
mutate(saldo = as.numeric(as.character(SALDORITEMINFORMAODIALANAMENT)),
tipo_doc = str_sub(ID_DOCUMENTO_LANC, 16, 17)) %>%
#count(tipo_doc)
group_by(ID_ANO_LANC, CO_NATUREZA_DESPESA_DETA) %>%
summarise(saldo = sum(saldo)) %>%
spread(key = ID_ANO_LANC, value = saldo)
library(tidyverse)
dados <- dados_brutos %>%
mutate(saldo = as.numeric(as.character(SALDORITEMINFORMAODIALANAMENT)),
tipo_doc = str_sub(ID_DOCUMENTO_LANC, 16, 17)) %>%
#count(tipo_doc)
group_by(ID_ANO_LANC, CO_NATUREZA_DESPESA_DETA) %>%
summarise(saldo = sum(saldo)) %>%
spread(key = ID_ANO_LANC, value = saldo)
View(dados)
